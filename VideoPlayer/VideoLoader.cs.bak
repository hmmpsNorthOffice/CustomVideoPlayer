using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using System.IO;
using System.Diagnostics;
using MusicVideoPlayer.YT;
using SongCore;
using MusicVideoPlayer.UI;
using SongCore.Utilities;

namespace MusicVideoPlayer.Util
{
    public class VideoLoader : MonoBehaviour
    {
        public event Action VideosLoadedEvent;
        public bool AreVideosLoaded { get; private set; }
        public bool AreVideosLoading { get; private set; }

        public bool DictionaryBeingUsed { get; private set; }

        public static Dictionary<IPreviewBeatmapLevel, VideoData> videos { get; private set; }
        public static List<CustomVideoData> customVideos { get; private set; }

        public static bool loadLocalVideosFirst = true;        // sets priority of local videos vs custom
        public static bool rollingVideoQueueEnable = false;    // should video queue increment each play?
        public static bool rollingOffsetEnable = false;  // should video offset advance each play?

        public static int globalRollingOffset = 0;       // This is the value that replaces VideoData.offset when rolling offset is enabled
        public static int rollingOffsetAmount = 180000;  // This is the amount the offset advances (* videospeed), until I can figure out how to get song.length 
                                                            // I'm just guessing most songs last about 3 minutes ...

        public static float videoPlaybackSpeed = 1f;    // saved and recalled from mvp.ini
        public static int numberOfCustomVideos = 0;
        public static int nextVideoNumber = 0;          // position in video queue, saved and recalled from mvp.ini


        private HMTask _loadingTask;
        private bool _loadingCancelled;

        public static VideoLoader Instance;

        public static void OnLoad()
        {
            if (Instance != null) return;
            new GameObject("VideoFetcher").AddComponent<VideoLoader>();
        }

        private void Awake()
        {
            if (Instance != null) return;
            Instance = this;

            Loader.SongsLoadedEvent += RetrieveAllVideoData;

            DontDestroyOnLoad(gameObject);
        }
        
        public string GetVideoPath(IBeatmapLevel level, bool onlyLocalVideos)        // currently method is unused               
        {
            VideoData vid;
            if (videos.TryGetValue(level, out vid)) return GetVideoPath(vid, onlyLocalVideos);   
            return GetCustomVideoPath();     
        }


        public string GetVideoPath(VideoData video, bool onlyLocalVideos)
        {
            // if (local videos have priority and its in the dictionary) or its mandated
            if ((loadLocalVideosFirst && SongHasVideo(video.level)) || onlyLocalVideos)      
            {
                return Path.Combine(GetLevelPath(video.level), video.videoPath);
            }
            else 
            {
                return GetCustomVideoPath();
            }
        }    

        public string GetCustomVideoPath()
        {
            // numberOfCustomVideos is initialized when the list is built in RetrieveCustomVideoData();
            if (numberOfCustomVideos == 1 || nextVideoNumber >= numberOfCustomVideos) nextVideoNumber = 0;
            return (numberOfCustomVideos > 0) ? customVideos[nextVideoNumber].videoPath : null;          
        }

        public VideoData GetVideo(IPreviewBeatmapLevel level)  
        {          
            VideoData vid;

            if ((videos.TryGetValue(level, out vid)) && loadLocalVideosFirst) return vid;  // if level is in the dictionary, return it 
            else
            {
                if (numberOfCustomVideos > 0)
                {
                    VideoData customVideo = new VideoData(level);        // otherwise generate one from 'customvideo' constructor
                    if (numberOfCustomVideos == 1 || nextVideoNumber >= numberOfCustomVideos) nextVideoNumber = 0;
                    customVideo.offset = customVideos[nextVideoNumber].customVidOffset; 
                    return customVideo;
                }
                else return null;
            }
        }

        public static string GetLevelPath(IPreviewBeatmapLevel level)
        {
            if (level is CustomPreviewBeatmapLevel)
            {
                // Custom song
                return (level as CustomPreviewBeatmapLevel).customLevelPath;
            }
            else
            {
                // OST
                var videoFileName = level.songName;
                // strip invlid characters
                foreach (var c in Path.GetInvalidFileNameChars())
                {
                    videoFileName = videoFileName.Replace(c, '-');
                }
                videoFileName = videoFileName.Replace('\\', '-');
                videoFileName = videoFileName.Replace('/', '-');

                return Path.Combine(Environment.CurrentDirectory, "Beat Saber_Data", "CustomLevels", "_OST") + @"\" + videoFileName;

            }
        }

        public bool SongHasVideo(IPreviewBeatmapLevel level)   
        {
            return videos.ContainsKey(level);
        }

        public void AddVideo(VideoData video)
        {
            if(videos.ContainsKey(video.level)) videos.Remove(video.level);     
            try 
            {
                video.downloadState = DownloadState.Downloaded;
                videos.Add(video.level, video);
            }
            catch (Exception e)
            {
                Plugin.logger.Debug("Exception in Addvideo()");
                Plugin.logger.Error(e.ToString());
            } 
        }

        public void RemoveVideo(VideoData video)
        {
            videos.Remove(video.level);
        }

        public static void SaveVideoToDisk(VideoData video)
        {
            if (video == null) return;
            if (!Directory.Exists(GetLevelPath(video.level))) Directory.CreateDirectory(GetLevelPath(video.level));
            File.WriteAllText(Path.Combine(GetLevelPath(video.level), "video.json"), JsonUtility.ToJson(video));

            //using (StreamWriter streamWriter = File.CreateText(Path.Combine(GetLevelPath(video.level), "video.json")))
            //{
            //    streamWriter.Write(JsonUtility.ToJson(video));
            //}
        }

        private void RetrieveAllVideoData(Loader loader, Dictionary<string, CustomPreviewBeatmapLevel> levels)
        {
              

            videos = new Dictionary<IPreviewBeatmapLevel, VideoData>();
            RetrieveCustomLevelVideoData(loader, levels);
            RetrieveOSTVideoData();

            RetrieveCustomVideoData();
        }

        public void RetrieveCustomVideoData()
        {
            customVideos = new List<CustomVideoData>();

            try
            {
                string localPath = Path.Combine(Environment.CurrentDirectory, "CustomVideos");
                var directory = new DirectoryInfo(localPath);


                if (directory.Exists)
                {
                    foreach (var mp4file in directory.GetFiles("*.mp4", SearchOption.AllDirectories)) // .OrderBy(mp4file => mp4file.Name))  (already alphabetical)
                    {
                        CustomVideoData video = new CustomVideoData();

                        video.filename = mp4file.Name;
                        video.videoPath = mp4file.FullName;

                     //   Plugin.logger.Debug("video.filename : " + video.filename);
                     //   Plugin.logger.Debug("video.videoPath : " + video.videoPath);

                        customVideos.Add(video);

                        // note : using GetFiles rather than Directory.EnumerateFiles which is less efficient but returns ordered list
                    }

                    numberOfCustomVideos = customVideos.Count;
                    
                }
                else
                {
                    numberOfCustomVideos = 0;
                }
            }
            catch (Exception e)
            {
                Plugin.logger.Debug("RetrieveCustomVideoData() try catch caught ...");
                Plugin.logger.Error(e.ToString());
            }

            if (VideoLoader.nextVideoNumber < 0 || VideoLoader.nextVideoNumber >= VideoLoader.numberOfCustomVideos) VideoLoader.nextVideoNumber = 0;

        }
        private void RetrieveOSTVideoData()
        {
            BeatmapLevelSO[] levels = Resources.FindObjectsOfTypeAll<BeatmapLevelSO>().Where(x=> x.GetType() != typeof(CustomBeatmapLevel)).ToArray();
            
            Action job = delegate
            {
                try
                {

                    float i = 0;
                    var songPathBase = Path.Combine(Environment.CurrentDirectory, "Beat Saber_Data", "CustomLevels", "_OST");
                    string songPath = "";
                    foreach (var level in levels)
                    {
                        i++;
                        var videoFileName = level.songName;
                        // strip invlid characters
                        foreach (var c in Path.GetInvalidFileNameChars())
                        {
                            videoFileName = videoFileName.Replace(c, '-');
                        }
                        videoFileName = videoFileName.Replace('\\', '-');
                        videoFileName = videoFileName.Replace('/', '-');

                        //    G:\Steam Games\steamapps\common\Beat Saber\Beat Saber_Data\CustomLevels\_OST

                        songPath = songPathBase + @"\" + videoFileName;

                     //   Plugin.logger.Debug("videoPath : " + songPath);       // enable this log to see the paths neccessary to add local videos to ost maps
                        if (!Directory.Exists(songPath)) continue;
                        var results = Directory.GetFiles(songPath, "video.json", SearchOption.AllDirectories);
                        if (results.Length == 0)
                        {
                            continue;
                        }

                        var result = results[0];

                        try
                        {
                            var i1 = i;
                            HMMainThreadDispatcher.instance.Enqueue(delegate
                            {
                                if (_loadingCancelled) return;
                                VideoData video = LoadVideo(result, level.difficultyBeatmapSets[0].difficultyBeatmaps[0].level);
                                if (video != null)
                                {
                                    AddVideo(video);
                                }
                            });
                        }
                        catch (Exception e)
                        {
                            Plugin.logger.Error("Failed to load song folder: " + result);
                            Plugin.logger.Error(e.ToString());
                        }
                    }

                }
                catch (Exception e)
                {
                    Plugin.logger.Error("RetrieveOSTVideoData failed:");
                    Plugin.logger.Error(e.ToString());
                }
            };

            Action finish = delegate
            {

                AreVideosLoaded = true;
                AreVideosLoading = false;

                _loadingTask = null;

                VideosLoadedEvent?.Invoke();
            };

            _loadingTask = new HMTask(job, finish);
            _loadingTask.Run();
        }

        private void RetrieveCustomLevelVideoData(Loader loader, Dictionary<string, CustomPreviewBeatmapLevel> levels)
        {
            Action job = delegate
            {
                try
                {
                    float i = 0;
                    foreach (var level in levels)
                    {
                        i++;
                        var songPath = level.Value.customLevelPath;
                        var results = Directory.GetFiles(songPath, "video.json", SearchOption.AllDirectories);
                        if (results.Length == 0)
                        {
                            continue;
                        }

                        var result = results[0];

                        try
                        {
                            var i1 = i;
                            HMMainThreadDispatcher.instance.Enqueue(delegate
                            {
                                if (_loadingCancelled) return;
                                
                                VideoData video = LoadVideo(result, level.Value);
                                if (video != null)
                                {
                                    AddVideo(video);
                                }
                                
                            });
                        }
                        catch (Exception e)
                        {
                            Plugin.logger.Error("Failed to load song folder: " + result);
                            Plugin.logger.Error(e.ToString());
                        }
                    }

                }
                catch (Exception e)
                {
                    Plugin.logger.Error("RetrieveCustomLevelVideoData failed:");
                    Plugin.logger.Error(e.ToString());
                }
            };

            Action finish = delegate
            {
                AreVideosLoaded = true;
                AreVideosLoading = false;

                _loadingTask = null;

                VideosLoadedEvent?.Invoke();
            };

            _loadingTask = new HMTask(job, finish);
            _loadingTask.Run();
        }

        public void DeleteVideo(VideoData video)
        {           
          //  string hmm1 = GetLevelPath(video.level);
          //  Plugin.logger.Debug("DeleteVideo : levelPath" + hmm1);

            File.Delete(Path.Combine(GetLevelPath(video.level), "video.json"));

            File.Delete(GetVideoPath(video, true));
            RemoveVideo(video);           // remove from dictionary,
        }

        private VideoData LoadVideo(string jsonPath, IPreviewBeatmapLevel level)
        {
            var infoText = File.ReadAllText(jsonPath);
            VideoData vid;
            try
            {
                vid = JsonUtility.FromJson<VideoData>(infoText);
            }
            catch (Exception)
            {
                Plugin.logger.Warn("Error parsing video json: " + jsonPath);
                return null;
            }

            vid.level = level;

            if (File.Exists(GetVideoPath(vid, false)))   
            {
                vid.downloadState = DownloadState.Downloaded;
            }

           // Plugin.logger.Debug("VideoData LoadVideo() title : " + vid.title);
            return vid;
        }
    }
}
